-- Mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local border = {
      {"‚îå", "FloatBorder"},
      {"‚îÄ", "FloatBorder"},
      {"‚îê", "FloatBorder"},
      {"‚îÇ", "FloatBorder"},
      {"‚îò", "FloatBorder"},
      {"‚îÄ", "FloatBorder"},
      {"‚îî", "FloatBorder"},
      {"‚îÇ", "FloatBorder"},
}

vim.diagnostic.config({
	virtual_text = false,
	virtual_lines = false,
	update_in_insert = true,
	signs = true,
	float = {
		show_header = true,
		source = 'always',
		border = border
	}
})

vim.fn.sign_define("DiagnosticSignError", { text = "ü§¨", texthl = "DiagnosticSignError" })
vim.fn.sign_define("DiagnosticSignWarn", { text = "üôã", texthl = "DiagnosticSignWarn" })
vim.fn.sign_define("DiagnosticSignInformation", { text = "üíÅ", texthl = "DiagnosticSignInfo" })
vim.fn.sign_define("DiagnosticSignHint", { text = "üí°", texthl = "DiagnosticSignHint" })

local opts = { noremap=true, silent=true }
vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)
vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)
vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  local bufopts = { noremap=true, silent=true, buffer=bufnr }
  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
  vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
  vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
  vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
  vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, bufopts)
  vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
  vim.keymap.set('n', '<space>wl', function()
    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  end, bufopts)
  vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, bufopts)
  vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, bufopts)
  vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, bufopts)
  vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
  vim.keymap.set('n', '<space>f', vim.lsp.buf.formatting, bufopts)
end

local lsp_flags = {
  -- This is the default in Nvim 0.7+
  debounce_text_changes = 150,
}

local handlers =  {
  ["textDocument/hover"] = vim.lsp.with(vim.lsp.handlers.hover, {border = border}),
  ["textDocument/signatureHelp"] = vim.lsp.with(vim.lsp.handlers.signature_help, {border = border }),
}

local nvim_lsp = require 'lspconfig'

nvim_lsp.rust_analyzer.setup ({
    on_attach = on_attach,
    handlers = handlers,
    flags = lsp_flags,
    -- Server-specific settings...
    settings = {
      ["rust-analyzer"] = {}
    }
})

-- Enable GraphQL support
nvim_lsp.graphql.setup{
    handlers = handlers,
    on_attach = on_attach,
    flags = lsp_flags
}

-- Enable JSON support
local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities.textDocument.completion.completionItem.snippetSupport = true

require'lspconfig'.jsonls.setup{
    handlers = handlers,
    on_attach = on_attach,
    flags = lsp_flags,
    capabilities = capabilities,
    init_options = { provideFormatter = true }
}

nvim_lsp.gopls.setup {
    on_attach = on_attach,
    handlers = handlers,
    flags = lsp_flags
}

-- Enable TS support
require'lspconfig'.tsserver.setup{
    on_attach = on_attach,
    handlers = handlers,
    flags = lsp_flags
}

-- Adds border to :LspInfo command
local win = require('lspconfig.ui.windows')
local _default_opts = win.default_opts

win.default_opts = function(options)
  local opts = _default_opts(options)
  opts.border = 'single'
  return opts
end

